from PIL import Image
from pathlib import Path
from PyQt6.QtWidgets import (
    QApplication,
    QWidget,
    QPushButton,
    QLabel,
    QFileDialog,
    QComboBox,
    QLineEdit,
    QProgressBar,
    QVBoxLayout,
    QHBoxLayout,
    QMessageBox,
)
from PyQt6.QtGui import QFont, QIcon, QTransform, QPixmap
from PyQt6.QtCore import Qt, QSettings
import sys
import time
import os
import tkinter as tk

class Txt2Img(QWidget):
    def __init__(self):
        super().__init__()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.setWindowTitle("PixelAlchemy")
        # –ó–∞–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.resize(230, 300)
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç
        v_layout = QVBoxLayout(self)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –æ–∫–Ω–∞
        self.setWindowIcon(QIcon(os.path.join('images', 'icon.png')))

        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("–¢–µ–∫—Å—Ç –≤ –∫–∞—Ä—Ç–∏–Ω–∫—É", alignment=Qt.AlignmentFlag.AlignCenter)
        title_font = QFont("Dungeon", 20, QFont.Weight.Bold)
        title_label.setFont(title_font)
        v_layout.addWidget(title_label)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        h_load_file_layout = QHBoxLayout()
        load_button = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å")
        load_button.clicked.connect(self.load_text_file)
        h_load_file_layout.addStretch()
        h_load_file_layout.addWidget(load_button)
        h_load_file_layout.addStretch()
        v_layout.addLayout(h_load_file_layout)

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        h_name_layout = QHBoxLayout()
        name_label = QLabel("–ò–º—è:")
        self.name_input = QLineEdit("output")
        h_name_layout.addWidget(name_label)
        h_name_layout.addWidget(self.name_input)
        v_layout.addLayout(h_name_layout)

        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        h_extension_layout = QHBoxLayout()
        extension_label = QLabel("–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ:")
        self.extension_combo_box = QComboBox()
        self.extension_combo_box.addItems(["png", "jpg", "webp", "ico", "bmp"])
        self.extension_combo_box.setCurrentIndex(0)
        h_extension_layout.addWidget(extension_label)
        h_extension_layout.addWidget(self.extension_combo_box)
        v_layout.addLayout(h_extension_layout)

        """# –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        h_color_type_layout = QHBoxLayout()
        color_type_label = QLabel("–¢–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        self.color_type_combo_box = QComboBox()
        self.color_type_combo_box.addItems(["–¶–≤–µ—Ç–Ω–∞—è", "–ß–µ—Ä–Ω–æ-–±–µ–ª–∞—è"])
        self.color_type_combo_box.setCurrentIndex(0)
        h_color_type_layout.addWidget(color_type_label)
        h_color_type_layout.addWidget(self.color_type_combo_box)
        v_layout.addLayout(h_color_type_layout)"""

        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        h_color_format_layout = QHBoxLayout()
        color_format_label = QLabel("–¶–≤–µ—Ç–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç:")
        self.color_format_combo_box = QComboBox()
        self.color_format_combo_box.addItems(["RGB", "CMYK"])
        self.color_format_combo_box.setCurrentIndex(0)
        h_color_format_layout.addWidget(color_format_label)
        h_color_format_layout.addWidget(self.color_format_combo_box)
        v_layout.addLayout(h_color_format_layout)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 100)
        v_layout.addWidget(self.progress_bar)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç –∏ –û—Ç–º–µ–Ω–∞
        h_buttons_layout = QHBoxLayout()
        cancel_button = QPushButton("–û—Ç–º–µ–Ω–∞")
        cancel_button.clicked.connect(self.close)
        start_button = QPushButton("–°—Ç–∞—Ä—Ç")
        start_button.clicked.connect(self.start_conversion)
        h_buttons_layout.addWidget(start_button)
        h_buttons_layout.addWidget(cancel_button)
        v_layout.addLayout(h_buttons_layout)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
        self.theme_button = QPushButton("üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞")
        self.theme_button.clicked.connect(self.toggle_theme)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        import getpass
        username = getpass.getuser()
        print(username)
        self.output_folder = f'C://'
        self.choose_folder_button = QPushButton("–ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        self.choose_folder_button.clicked.connect(self.choose_output_folder)
        h_theme_folder_layout = QHBoxLayout()
        h_theme_folder_layout.addWidget(self.theme_button)
        h_theme_folder_layout.addWidget(self.choose_folder_button)
        v_layout.addLayout(h_theme_folder_layout)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
        self.settings = QSettings('YourCompany', 'PixelAlchemy')
        self.dark_theme = self.settings.value('dark_theme', False, type=bool)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        self.apply_theme()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        self.setLayout(v_layout)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.input_string = ""
        self.color = "–ß–µ—Ä–Ω–æ-–±–µ–ª–∞—è"
        self.color_format = "RGB"

    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–µ–º–Ω–æ–π –∏ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–∞–º–∏"""
        self.dark_theme = not self.dark_theme
        self.settings.setValue('dark_theme', self.dark_theme)
        self.apply_theme()

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã"""
        if self.dark_theme:
            self.theme_button.setText("‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
            self.setStyleSheet("""
                QWidget {
                    background-color: #2b2b2b;
                    color: #ffffff;
                }
                QPushButton {
                    background-color: #404040;
                    border: 1px solid #555555;
                    padding: 5px;
                    border-radius: 6px;
                }
                QPushButton:hover {
                    background-color: #4a4a4a;
                }
                QComboBox {
                    background-color: #404040;
                    border: 1px solid #555555;
                    padding: 5px;
                    border-radius: 6px;
                }
                QLineEdit {
                    background-color: #404040;
                    border: 1px solid #555555;
                    padding: 5px;
                    border-radius: 6px;
                }
                QProgressBar {
                    border: 1px solid #555555;
                    border-radius: 6px;
                    text-align: center;
                }
                QProgressBar::chunk {
                    background-color: #3daee9;
                }
            """)
        else:
            self.theme_button.setText("üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
            self.setStyleSheet("""
                QWidget {
                    background-color: #f0f0f0;
                    color: #000000;
                }
                QPushButton {
                    background-color: #ffffff;
                    border: 1px solid #cccccc;
                    padding: 5px;
                    border-radius: 6px;
                }
                QPushButton:hover {
                    background-color: #e6e6e6;
                }
                QComboBox {
                    background-color: #ffffff;
                    border: 1px solid #cccccc;
                    padding: 5px;
                    border-radius: 6px;
                }
                QLineEdit {
                    background-color: #ffffff;
                    border: 1px solid #cccccc;
                    padding: 5px;
                    border-radius: 6px;
                }
                QProgressBar {
                    border: 1px solid #cccccc;
                    border-radius: 6px;
                    text-align: center;
                }
                QProgressBar::chunk {
                    background-color: #0dd600;
                }
            """)

    def loading_done(self):
        """–ú–µ—Ç–æ–¥, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏"""
        pass

    def load_text_file(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞"""
        file_dialog = QFileDialog.getOpenFileName(
            self, "–û—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª", "", "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt *.md);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )
        if file_dialog[0]:
            file_path = Path(file_dialog[0])
            try:
                with open(file_path, "r", encoding="utf-8") as file:
                    self.input_string = file.read()
                print(self.input_string)
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

    def start_conversion(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        if not self.input_string:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        name = self.name_input.text().strip()
        extension = self.extension_combo_box.currentText()
        #self.color = self.color_type_combo_box.currentText()
        self.color_format = self.color_format_combo_box.currentText()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ ASCII –∑–Ω–∞—á–µ–Ω–∏–π
        array = []
        try:
            for char in self.input_string:
                ascii_value = ord(char)
                array.append(ascii_value)
        except NameError as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏: {e}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–∞ –∏ –¥–æ–ø–æ–ª–Ω—è–µ–º –µ–≥–æ –¥–æ –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–º
        if len(array) % 3 != 0:
            array += [0] * (3 - (len(array) % 3))

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä
        for count in range(101):
            self.progress_bar.setValue(count)
            QApplication.processEvents()
            time.sleep(0.01)

        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.create_image_from_array(array, name, extension, self.color, self.color_format)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {name}.{extension}.")

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        event.accept()

    def choose_output_folder(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        folder = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        if folder:
            self.output_folder = folder
            QMessageBox.information(self, "–ü–∞–ø–∫–∞ –≤—ã–±—Ä–∞–Ω–∞", f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤:\n{folder}")

    def create_image_from_array(self, data, name, extension, color, color_format):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –º–∞—Å—Å–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        data: –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø–∏–∫—Å–µ–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        name: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        extension: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        color: –¢–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ('–¶–≤–µ—Ç–Ω–∞—è' –∏–ª–∏ '–ß–µ—Ä–Ω–æ-–±–µ–ª–∞—è')
        color_format: –¶–≤–µ—Ç–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç ('RGB' –∏–ª–∏ 'CMYK')
        """

        def find_max_factors(n):
            max_factor1 = 1
            max_factor2 = n
            for i in range(2, int(n**0.5) + 1):
                if n % i == 0:
                    factor1 = i
                    factor2 = n // i
                    if factor1 > max_factor1:
                        max_factor1 = factor1
                        max_factor2 = factor2
            return max_factor1, max_factor2


        width, height = find_max_factors(len(data))
        print(len(data))
        print(width)
        print(height)
        print(width * height)
        pixels = []
        image = Image.new("RGB", (width, height))

        if color == '–¶–≤–µ—Ç–Ω–∞—è':
            pixels.append(255)
            pixels.append(255)
            for i in range(height):
                for j in range(width - 2):
                    r = data[j * i]
                    g = data[(j + 1) * i]
                    b = data[(j + 2) * i]
                    pixels.append((r, g, b))
        elif color == '–ß–µ—Ä–Ω–æ-–±–µ–ª–∞—è':
            for i in range(height*width):
                #for j in range(width):
                    r = data[i]
                    g = data[i]
                    b = data[i]
                    pixels.append((r, g, b))

        image.putdata(pixels)
        if color_format == 'CMYK':
            image = image.convert('CMYK')
        
        if self.output_folder:
            save_path = os.path.join(self.output_folder, f"{name}.{extension}")
        else:
            save_path = f"{name}.{extension}"
        
        image.save(save_path)
        print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {save_path}")





class Img2Txt(QWidget):
    def __init__(self):
        super().__init__()
        self.image_path = "C:/"
        self.setWindowTitle("PixelAlchemy")
        # –ó–∞–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.resize(230, 300)
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç
        v_layout = QVBoxLayout(self)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –æ–∫–Ω–∞
        self.setWindowIcon(QIcon(os.path.join('images', 'icon.png')))

        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("–ö–∞—Ä—Ç–∏–Ω–∫–∞ –≤ —Ç–µ–∫—Å—Ç", alignment=Qt.AlignmentFlag.AlignCenter)
        title_font = QFont("Dungeon", 20, QFont.Weight.Bold)
        title_label.setFont(title_font)
        v_layout.addWidget(title_label)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        h_load_file_layout = QHBoxLayout()
        load_button = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª")
        load_button.clicked.connect(self.load_text_file)
        h_load_file_layout.addStretch()
        h_load_file_layout.addWidget(load_button)
        h_load_file_layout.addStretch()
        v_layout.addLayout(h_load_file_layout)

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        h_name_layout = QHBoxLayout()
        name_label = QLabel("–ò–º—è:")
        self.name_input = QLineEdit("output")
        h_name_layout.addWidget(name_label)
        h_name_layout.addWidget(self.name_input)
        v_layout.addLayout(h_name_layout)

        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        h_extension_layout = QHBoxLayout()
        extension_label = QLabel("–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ:")
        self.extension_combo_box = QComboBox()
        self.extension_combo_box.addItems(["txt", "md"])
        self.extension_combo_box.setCurrentIndex(0)
        h_extension_layout.addWidget(extension_label)
        h_extension_layout.addWidget(self.extension_combo_box)
        v_layout.addLayout(h_extension_layout)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 100)
        v_layout.addWidget(self.progress_bar)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç –∏ –û—Ç–º–µ–Ω–∞
        h_buttons_layout = QHBoxLayout()
        cancel_button = QPushButton("–û—Ç–º–µ–Ω–∞")
        cancel_button.clicked.connect(self.close)
        start_button = QPushButton("–°—Ç–∞—Ä—Ç")
        start_button.clicked.connect(self.image_to_text)
        h_buttons_layout.addWidget(start_button)
        h_buttons_layout.addWidget(cancel_button)
        v_layout.addLayout(h_buttons_layout)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
        self.theme_button = QPushButton("üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞")
        self.theme_button.clicked.connect(self.toggle_theme)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.output_folder = f'C://outputs'
        self.choose_folder_button = QPushButton("–ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        self.choose_folder_button.clicked.connect(self.choose_output_folder)
        h_theme_folder_layout = QHBoxLayout()
        h_theme_folder_layout.addWidget(self.theme_button)
        h_theme_folder_layout.addWidget(self.choose_folder_button)
        v_layout.addLayout(h_theme_folder_layout)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
        self.settings = QSettings('PixelAlchemy')
        self.dark_theme = self.settings.value('dark_theme', False, type=bool)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        self.apply_theme()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        self.setLayout(v_layout)

    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–µ–º–Ω–æ–π –∏ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–∞–º–∏"""
        self.dark_theme = not self.dark_theme
        self.settings.setValue('dark_theme', self.dark_theme)
        self.apply_theme()

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã"""
        if self.dark_theme:
            self.theme_button.setText("‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
            self.setStyleSheet("""
                QWidget {
                    background-color: #2b2b2b;
                    color: #ffffff;
                }
                QPushButton {
                    background-color: #404040;
                    border: 1px solid #555555;
                    padding: 5px;
                    border-radius: 6px;
                }
                QPushButton:hover {
                    background-color: #4a4a4a;
                }
                QComboBox {
                    background-color: #404040;
                    border: 1px solid #555555;
                    padding: 5px;
                    border-radius: 6px;
                }
                QLineEdit {
                    background-color: #404040;
                    border: 1px solid #555555;
                    padding: 5px;
                    border-radius: 6px;
                }
                QProgressBar {
                    border: 1px solid #555555;
                    border-radius: 6px;
                    text-align: center;
                }
                QProgressBar::chunk {
                    background-color: #3daee9;
                }
            """)
        else:
            self.theme_button.setText("üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
            self.setStyleSheet("""
                QWidget {
                    background-color: #f0f0f0;
                    color: #000000;
                }
                QPushButton {
                    background-color: #ffffff;
                    border: 1px solid #cccccc;
                    padding: 5px;
                    border-radius: 6px;
                }
                QPushButton:hover {
                    background-color: #e6e6e6;
                }
                QComboBox {
                    background-color: #ffffff;
                    border: 1px solid #cccccc;
                    padding: 5px;
                    border-radius: 6px;
                }
                QLineEdit {
                    background-color: #ffffff;
                    border: 1px solid #cccccc;
                    padding: 5px;
                    border-radius: 6px;
                }
                QProgressBar {
                    border: 1px solid #cccccc;
                    border-radius: 6px;
                    text-align: center;
                }
                QProgressBar::chunk {
                    background-color: #0dd600;
                }
            """)

    def loading_done(self):
        """–ú–µ—Ç–æ–¥, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏"""
        pass

    
    def load_text_file(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞"""
        file_dialog = QFileDialog.getOpenFileName(
            self, "–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.png)"
        )
        if file_dialog[0]:
            self.image_path = file_dialog[0]
            QMessageBox.information(self, "–§–∞–π–ª –≤—ã–±—Ä–∞–Ω", f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {self.image_path}")


    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        event.accept()

    def choose_output_folder(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        folder = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        if folder:
            self.output_folder = folder
            QMessageBox.information(self, "–ü–∞–ø–∫–∞ –≤—ã–±—Ä–∞–Ω–∞", f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤:\n{folder}")


    def image_to_text(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç"""
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        name = self.name_input.text()
        extension = self.extension_combo_box.currentText()

        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.open(self.image_path)
            width, height = img.size
            img = img.convert('RGB')
            text = ""

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç
            for y in range(height):
                for x in range(width):
                    r, g, b = img.getpixel((x, y))
                    ascii_code = r
                    char = chr(ascii_code)
                    text += char

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            for count in range(101):
                self.progress_bar.setValue(count)
                QApplication.processEvents()
                time.sleep(0.01)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            save_path = os.path.join(self.output_folder, f"{name}.{extension}")
            with open(save_path, 'w', encoding='utf-8') as f:
                f.write(text)

            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {save_path}")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


if __name__ == "__main__":
    mode = None
    root = tk.Tk()
    root.title("PixelAlchemy")
    root.geometry('300x140')
    lbl = tk.Label(root, text="–í—ã–±–µ—Ä–µ—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
    lbl.pack(pady=10)
    btn_txt2img = tk.Button(root, text="–¢–µ–∫—Å—Ç –≤ –∫–∞—Ä—Ç–∏–Ω–∫—É",
                            command=lambda: (exec("global mode; mode='txt2img'"), root.destroy()))
    btn_txt2img.pack(pady=5)
    btn_img2txt = tk.Button(root, text="–ö–∞—Ä—Ç–∏–Ω–∫–∞ –≤ —Ç–µ–∫—Å—Ç",
                            command=lambda: (exec("global mode; mode='img2txt'"), root.destroy()))
    btn_img2txt.pack(pady=5)
    root.mainloop()

    app = QApplication(sys.argv)
    if mode == 'txt2img':
        ex = Txt2Img()
    elif mode == 'img2txt':
        ex = Img2Txt()
    else:
        sys.exit()

    ex.setWindowIcon(QIcon('icon.png'))   
    ex.show()
    sys.exit(app.exec())